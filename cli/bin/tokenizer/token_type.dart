/*This file is part of Penny.

Penny is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Penny is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Penny. If not, see <https://www.gnu.org/licenses/>.*/

enum TokenType {
  //symbols
  LEFT_PAREN,
  RIGHT_PAREN,
  LEFT_BRACE,
  RIGHT_BRACE,
  LEFT_BRACKET,
  RIGHT_BRACKET,
  COLON,
  COMMA,
  DOT,
  MINUS,
  MINUSMINUS,
  PLUS,
  PLUSPLUS,
  SLASH,
  STAR,
  MOD,
  STARSTAR,
  BANG_EQUAL,
  EQUAL,
  EQUAL_EQUAL,
  GREATER,
  GREATER_EQUAL,
  LESS,
  LESS_EQUAL,
  QUESTION,
  ARROW,

  //literals
  IDENTIFIER,
  STRING,
  INTEGER,
  FLOAT,

  //keywords
  ELSE,
  FALSE,
  FUNCTION,
  FOR,
  IF,
  IN,
  NOT,
  NULL,
  PRINT,
  RETURN,
  TRUE,
  VAR,
  RANGE,
  WHILE,
  BREAK,
  CONTINUE,
  DOWHILE,
  SWITCH,
  IS,
  DEFAULT,
  FINAL,
  INCUDE,
  VOID,
  DELETE,
  GLOBAL,
  MEMORIZE,
  FORGET,
  RECALL,
  MULTILINE,
  FALL,

  AND,
  OR,
  ERROR,
  EOF,

  //bitwise
  BINAND,
  BINOR,
  BINXOR,
  BINCOMP,
  BINLEFTSHIFT,
  BINRIGHTSHIFT
}

final Map<String, Map<String, TokenType>> stringToTokenObj = {
  "+": {"+": TokenType.PLUSPLUS, "DEF": TokenType.PLUS},
  "-": {
    "-": TokenType.MINUSMINUS,
    ">": TokenType.ARROW,
    "DEF": TokenType.MINUS
  },
  "%": {"DEF": TokenType.MOD},
  "&": {"DEF": TokenType.BINAND},
  "|": {"DEF": TokenType.BINOR},
  "^": {"DEF": TokenType.BINXOR},
  "~": {"DEF": TokenType.BINCOMP},
  "/": {"*": TokenType.MULTILINE, "DEF": TokenType.SLASH},
  "*": {"*": TokenType.STARSTAR, "DEF": TokenType.STAR},
  "<": {
    "<": TokenType.BINLEFTSHIFT,
    "=": TokenType.LESS_EQUAL,
    "DEF": TokenType.LESS
  },
  ">": {
    ">": TokenType.BINRIGHTSHIFT,
    "=": TokenType.GREATER_EQUAL,
    "DEF": TokenType.GREATER
  },
  "=": {"=": TokenType.EQUAL_EQUAL, "DEF": TokenType.EQUAL},
  "(": {"DEF": TokenType.LEFT_PAREN},
  ")": {"DEF": TokenType.RIGHT_PAREN},
  "{": {"DEF": TokenType.LEFT_BRACE},
  "}": {"DEF": TokenType.RIGHT_BRACE},
  "[": {"DEF": TokenType.LEFT_BRACKET},
  "]": {"DEF": TokenType.RIGHT_BRACKET},
  ":": {"DEF": TokenType.COLON},
  ",": {"DEF": TokenType.COMMA},
  ".": {"DEF": TokenType.DOT},
  "?": {"DEF": TokenType.QUESTION},
  "!": {"=": TokenType.BANG_EQUAL, "DEF": TokenType.NOT}
};
final Map<TokenType, String> tokenToStrings = {
  TokenType.PLUS: "+",
  TokenType.PLUSPLUS: "++",
  TokenType.MINUS: "-",
  TokenType.MINUSMINUS: "--",
  TokenType.MOD: "%",
  TokenType.BINAND: "&",
  TokenType.BINOR: "|",
  TokenType.BINXOR: "^",
  TokenType.BINCOMP: "~",
  TokenType.SLASH: "/",
  TokenType.STAR: "*",
  TokenType.STARSTAR: "**",
  TokenType.BINLEFTSHIFT: "<<",
  TokenType.BINRIGHTSHIFT: ">>",
  TokenType.EQUAL: "=",
  TokenType.EQUAL_EQUAL: "==",
  TokenType.LEFT_PAREN: "(",
  TokenType.RIGHT_PAREN: ")",
  TokenType.LEFT_BRACE: "{",
  TokenType.RIGHT_BRACE: "}",
  TokenType.LEFT_BRACKET: "[",
  TokenType.RIGHT_BRACKET: "]",
  TokenType.COLON: ":",
  TokenType.COMMA: ",",
  TokenType.DOT: ".",
  TokenType.QUESTION: "?",
  TokenType.BANG_EQUAL: "!=",
  TokenType.NOT: "!",
  TokenType.GREATER: ">",
  TokenType.GREATER_EQUAL: ">=",
  TokenType.LESS: "<",
  TokenType.LESS_EQUAL: "<=",
  TokenType.ARROW: "->"
};

final Map<String, TokenType> KEYWORDS = {
  "else": TokenType.ELSE,
  "false": TokenType.FALSE,
  "func": TokenType.FUNCTION,
  "for": TokenType.FOR,
  "in": TokenType.IN,
  "if": TokenType.IF,
  "not": TokenType.NOT,
  "null": TokenType.NULL,
  "print": TokenType.PRINT,
  "return": TokenType.RETURN,
  "true": TokenType.TRUE,
  "var": TokenType.VAR,
  "range": TokenType.RANGE,
  "while": TokenType.WHILE,
  "break": TokenType.BREAK,
  "continue": TokenType.CONTINUE,
  "dowhile": TokenType.DOWHILE,
  "is": TokenType.IS,
  "switch": TokenType.SWITCH,
  "def": TokenType.DEFAULT,
  "and": TokenType.AND,
  "or": TokenType.OR,
  "final": TokenType.FINAL,
  "include": TokenType.INCUDE,
  "void": TokenType.VOID,
  "del": TokenType.DELETE,
  "glob": TokenType.GLOBAL,
  "memorize": TokenType.MEMORIZE, //Universal storage box
  "recall": TokenType.RECALL,
  "forget": TokenType.FORGET,
  "fall" : TokenType.FALL
};
